#!/usr/bin/env tsx

/**
 * Script para testar a fun√ß√£o reset do banco de dados
 */

import { getNeonClient, closeNeonClient } from '../src/integrations/neon/client';

async function testResetFunction() {
  const client = await getNeonClient();

  try {
    console.log('üîå Conectado ao banco Neon!\n');

    // 1. Verificar estado atual
    console.log('üìä ESTADO ATUAL DO BANCO:');
    console.log('='.repeat(50));
    
    const totalTx = await client.query('SELECT COUNT(*) as total FROM transactions');
    const totalPy = await client.query('SELECT COUNT(*) as total FROM payments');
    
    console.log(`Transa√ß√µes: ${totalTx.rows[0].total.toLocaleString()} linhas`);
    console.log(`Pagamentos: ${totalPy.rows[0].total.toLocaleString()} linhas`);
    console.log('');

    // 2. Simular opera√ß√£o de reset
    console.log('üß™ TESTANDO OPERA√á√ÉO DE RESET:');
    console.log('='.repeat(50));
    
    if (parseInt(totalTx.rows[0].total) > 0 || parseInt(totalPy.rows[0].total) > 0) {
      console.log('‚ö†Ô∏è  ATEN√á√ÉO: O banco cont√©m dados!');
      console.log('   Esta opera√ß√£o ir√° APAGAR TODOS os dados.');
      console.log('   Confirme se voc√™ realmente quer fazer isso.');
      console.log('');
      
      const readline = require('readline');
      const rl = readline.createInterface({
        input: process.stdin,
        output: process.stdout
      });
      
      const answer = await new Promise<string>((resolve) => {
        rl.question('Deseja continuar e apagar todos os dados? (sim/nao): ', resolve);
      });
      
      rl.close();
      
      if (answer.toLowerCase() !== 'sim') {
        console.log('‚ùå Opera√ß√£o cancelada pelo usu√°rio');
        return;
      }
      
      console.log('üîÑ Executando TRUNCATE das tabelas...');
      
      // Executar TRUNCATE
      await client.query('TRUNCATE TABLE transactions RESTART IDENTITY');
      await client.query('TRUNCATE TABLE payments RESTART IDENTITY');
      
      console.log('‚úÖ Tabelas truncadas com sucesso!');
      
      // 3. Verificar estado ap√≥s reset
      console.log('\nüìä ESTADO AP√ìS RESET:');
      console.log('='.repeat(50));
      
      const totalTxAfter = await client.query('SELECT COUNT(*) as total FROM transactions');
      const totalPyAfter = await client.query('SELECT COUNT(*) as total FROM payments');
      
      console.log(`Transa√ß√µes: ${totalTxAfter.rows[0].total.toLocaleString()} linhas`);
      console.log(`Pagamentos: ${totalPyAfter.rows[0].total.toLocaleString()} linhas`);
      
      if (parseInt(totalTxAfter.rows[0].total) === 0 && parseInt(totalPyAfter.rows[0].total) === 0) {
        console.log('üéâ RESET REALIZADO COM SUCESSO!');
        console.log('   O banco est√° completamente limpo.');
      } else {
        console.log('‚ö†Ô∏è  ALGO DEU ERRADO!');
        console.log('   Ainda h√° dados nas tabelas.');
      }
      
    } else {
      console.log('‚úÖ O banco j√° est√° vazio!');
      console.log('   N√£o √© necess√°rio fazer reset.');
    }

  } catch (error) {
    console.error('üí• Erro durante o teste:', error);
  } finally {
    await closeNeonClient();
    console.log('\nüîå Conex√£o encerrada');
  }
}

// Executar
testResetFunction().catch(console.error);